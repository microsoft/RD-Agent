extract_ideas:
  system: |-
    {% include "scenarios.data_science.share:scen.role" %}
    The user is improving a Kaggle competition implementation iteratively through traces where each new trace is modified from the current SOTA in the trace. If new trace surpasses the current SOTA, it will be the new SOTA. If not, it will be a failed experiment.
    You will be provided with:
      1. A detailed description of the competition scenario.
      2. A solution notebook that achieves SOTA performance for the competition.
    Your task is to analyze the provided information and extract the most impactful and insightful ideas from the solution notebook.

    ## Idea Definition
    An idea is a key insight, method, technique, or approach that significantly contributes to the solution's success.
    Each idea should satisfy:
      - **Transferable**: The idea should be applicable to similar scenarios. Focus on methods that can be generalized and avoid dataset- or competition-specific details such as column names or competition-specific tricks.
      - **Specific**: Clearly define the idea so it is distinguishable from general concepts. For example, instead of "feature engineering," specify "applying polynomial feature transformation to capture non-linear relationships."
      - **Reproducible**: The idea should be actionable and possible to implement based on the description. Provide actionable steps or implementation details in the `context` field, such as how optimal weights for ensembling were determined, criteria for hyperparameter tuning, or the algorithm used for feature selection.
      - **Impactful**: The idea must demonstrate a significant contribution to model performance. Prioritize ideas that have a measurable effect and exclude trivial, routine, boilerplate, or administrative steps (e.g., "handling multiple submissions" or "using `glob` for file operations").
      - **Complete**: The idea should include all dependent components necessary for its implementation and reproduction. For example, if an idea about model must use a specific feature engineering technique, include the feature engineering technique in the `context` field as well.
    
    ## Output Format
    For each of the extracted ideas, you should strictly follow the JSON schema. Your final output should be a dict containing all the extracted ideas.
    {
      "idea label": {
        "method": "A specific method used in this idea, described in a general and implementable way (e.g., 'applied a stacking ensemble method to combine predictions from multiple base models'). Avoid mentioning dataset-specific details to ensure better generalization",
        "context": "A detailed example of how the notebook implements this idea (e.g., 'the notebook used XGBoost, Random Forest, and LightGBM as base models and logistic regression as the meta-model').",
        "problem": "The nature of problem the idea addresses, described without referencing the method itself (e.g., 'a classification problem with complex decision boundaries').",
        "data": "The characteristics of the data (e.g., imbalance, high dimensionality, collinearity, outliers, missing data, skewed distribution, time-based pattern, etc.) that justify the use of this method.",
      }
    }

  user: |-
    # Competition Scenario Description
    {{ competition_desc }}

    # Solution Notebook
    {{ solution }}


extract_scenario_problems_and_ideas:
  system: |-
    {% include "scenarios.data_science.share:scen.role" %}
    The user is improving a Kaggle competition implementation iteratively through traces where each new trace is modified from the current SOTA in the trace. If new trace surpasses the current SOTA, it will be the new SOTA. If not, it will be a failed experiment.
    You will be provided with:
      1. A detailed description of the competition scenario.
      2. A solution notebook that achieves SOTA performance for the competition.
    Your task is to analyze the given information and
    1. **Identify Problems**: identify the scenario problems from the competition.
    2. **Extract Ideas**: for each of the identified problems, how does the solution notebook address the problem? What is the idea behind it? How does it work? What is the data that justifies the use of this method?

    ## Scenario Problems
    Scenario problems are specific, context-dependent challenges arising from a competition's dataset or domain. They fall into two categories:
    1. Dataset Characteristics: Inherent structural or statistical properties of the dataset (such as imbalance, high dimensionality, collinearity, outliers, missing data, skewed distribution, time-based patterns, etc.).
    2. Domain-specific Insights: Actionable knowledge derived from expertise in the competition's domain, enabling correct interpretation of data patterns or constraints. These insights are not evident from the data alone and require external context to resolve ambiguities, engineer features, or avoid invalid assumptions.

    ### Specification
    1. The problem should be specific and fine-grained. Avoid general or vague statements. 
    2. The problem should technical or methodological. Focus on design and implementation flaws, not runtime errors.
    3. The problem should be strictly aligned with the improvement of target metric. The problem should fit the template: "IF THE PROBLEM IS SOLVED, THEN THE TARGET METRIC WILL IMPROVE."
  
    ### Core Analysis Dimensions
    1. SOTA Mismatch Diagnosis: Systematically compare current implementations against both data properties and domain knowledge to identify critical discrepancies.
    2. Gap Forensic Analysis: Examine successful solutions to reveal unstated problems they implicitly address through workarounds.
    3. Domain-Implementation Conflict Detection: Identify instances where technical approaches violate domain constraints or oversimplify complex relationships.
    4. In case there is no SOTA implementation, your scenario problem should focus on the scenario itself.

    ## Idea
    An idea is a key insight, method, technique, or approach that significantly contributes to the solution's success.
    Each idea should satisfy:
      - **Transferable**: The idea should be applicable to similar scenarios. Focus on methods that can be generalized and avoid dataset- or competition-specific details such as column names or competition-specific tricks.
      - **Specific**: Clearly define the idea so it is distinguishable from general concepts. For example, instead of "feature engineering," specify "applying polynomial feature transformation to capture non-linear relationships."
      - **Reproducible**: The idea should be actionable and possible to implement based on the description. Provide actionable steps or implementation details in the `context` field, such as how optimal weights for ensembling were determined, criteria for hyperparameter tuning, or the algorithm used for feature selection.
      - **Impactful**: The idea must demonstrate a significant contribution to model performance. Prioritize ideas that have a measurable effect and exclude trivial, routine, boilerplate, or administrative steps (e.g., "handling multiple submissions" or "using `glob` for file operations").
      - **Complete**: The idea should include all dependent components necessary for its implementation and reproduction. For example, if an idea about model must use a specific feature engineering technique, include the feature engineering technique in the `context` field as well.
    
    ## Output Format
    For each of the extracted ideas, you should strictly follow the JSON schema. Your final output should be a dict containing all the extracted ideas.
    {
      "idea label (A concise label summarize the core concept of this idea)": {
        "problem": "The scenario problem that the idea addresses, described without referencing the method itself.",
        "method": "A specific method used in this idea, described in a general and implementable way (e.g., 'applied a stacking ensemble method to combine predictions from multiple base models'). Avoid mentioning dataset-specific details to ensure better generalization",
        "context": "A detailed example of how the notebook implements this idea (e.g., 'the notebook used XGBoost, Random Forest, and LightGBM as base models and logistic regression as the meta-model').",
      }
    }

  user: |-
    # Competition Scenario Description
    {{ competition_desc }}

    # Solution Notebook
    {{ solution }}